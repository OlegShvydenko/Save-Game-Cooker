Index: Backend/data_base/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from typing import List\r\n\r\nfrom flask_security import UserMixin\r\nfrom flask_sqlalchemy import SQLAlchemy\r\nfrom dataclasses import dataclass\r\n\r\nfrom sqlalchemy.orm import DeclarativeMeta\r\nimport json\r\n\r\n\r\nclass OutputMixin(object):\r\n    RELATIONSHIPS_TO_DICT = False\r\n\r\n    def __iter__(self):\r\n        return self.to_dict().items()\r\n\r\n    def to_dict(self, rel=None, backref=None):\r\n        if rel is None:\r\n            rel = self.RELATIONSHIPS_TO_DICT\r\n        res = {column.key: getattr(self, attr)\r\n               for attr, column in self.__mapper__.c.items()}\r\n        if rel:\r\n            for attr, relation in self.__mapper__.relationships.items():\r\n                # Avoid recursive loop between to tables.\r\n                if backref == relation.table:\r\n                    continue\r\n                value = getattr(self, attr)\r\n                if value is None:\r\n                    res[relation.key] = None\r\n                elif isinstance(value.__class__, DeclarativeMeta):\r\n                    res[relation.key] = value.to_dict(backref=self.__table__)\r\n                else:\r\n                    res[relation.key] = [i.to_dict(backref=self.__table__)\r\n                                         for i in value]\r\n        return res\r\n\r\n    def to_json(self, rel=None):\r\n        def extended_encoder(attr_type):\r\n            from datetime import datetime\r\n            from uuid import UUID\r\n            if isinstance(attr_type, datetime):\r\n                return attr_type.isoformat()\r\n            if isinstance(attr_type, UUID):\r\n                return str(attr_type)\r\n        if rel is None:\r\n            rel = self.RELATIONSHIPS_TO_DICT\r\n        return json.dumps(self.to_dict(rel), default=extended_encoder)\r\n\r\n\r\ndb = SQLAlchemy()\r\n\r\nroles_users = db.Table('roles_users',\r\n                       db.Column('user_id', db.Integer(), db.ForeignKey('user.id')),\r\n                       db.Column('role_id', db.Integer(), db.ForeignKey('role.id'))\r\n                       )\r\n\r\nuser_games = db.Table('user_games',\r\n                      db.Column('user_id', db.Integer(), db.ForeignKey('user.id')),\r\n                      db.Column('game_id', db.Integer(), db.ForeignKey('game.id')),\r\n                      db.Column('user_rating', db.Integer()),\r\n                      db.Column('favourite', db.Boolean())\r\n                      )\r\n\r\n\r\n@dataclass\r\nclass Role(db.Model, UserMixin):\r\n    id: int = db.Column(db.Integer, primary_key=True)\r\n    name: str = db.Column(db.String(100), unique=True)\r\n    description: str = db.Column(db.String(100))\r\n\r\n\r\ngame_genres = db.Table('game_genres',\r\n                       db.Column('game_id', db.Integer(), db.ForeignKey('game.id')),\r\n                       db.Column('genre_id', db.Integer(), db.ForeignKey('genre.id'))\r\n                       )\r\n\r\n\r\n@dataclass\r\nclass Genre(db.Model):\r\n    id: int = db.Column(db.Integer, primary_key=True)\r\n    name: str = db.Column(db.String(100), nullable=False)\r\n\r\n\r\n@dataclass\r\nclass Game(db.Model):\r\n    RELATIONSHIPS_TO_DICT = True\r\n\r\n    id: int = db.Column(db.Integer, primary_key=True)\r\n    name: str = db.Column(db.String(100), nullable=False)\r\n    short_description: str = db.Column(db.VARCHAR, nullable=True)\r\n    players_count: int = db.Column(db.Integer, nullable=False)\r\n    price: int = db.Column(db.Integer, nullable=False)\r\n    rating: int = db.Column(db.Integer, nullable=True)\r\n    preview_url: str = db.Column(db.VARCHAR)\r\n    genres: List[Genre] = db.relationship('Genre', secondary=game_genres, backref=db.backref('users', lazy='dynamic'))\r\n\r\n    def __repr__(self):\r\n        return self.name\r\n\r\n\r\n@dataclass\r\nclass User(db.Model, UserMixin):\r\n    RELATIONSHIPS_TO_DICT = True\r\n\r\n    id: int = db.Column(db.Integer, primary_key=True, autoincrement=True)\r\n    nickname: str = db.Column(db.String(100))\r\n    login_mail: str = db.Column(db.String(100), unique=True)\r\n    pass_hash: str = db.Column(db.String(255), nullable=False)\r\n    roles: List[Role] = db.relationship('Role', secondary=roles_users, backref=db.backref('users', lazy='dynamic'))\r\n    users_rating: List[Game] = db.relationship('Game', secondary=user_games, backref=db.backref('users', lazy='dynamic'))\r\n\r\n    # def has_role(self, role):\r\n    #     return self.role in roles_users\r\n\r\n    def get_id(self):\r\n        return self.id\r\n\r\n    def hash_password(self):\r\n        from werkzeug.security import generate_password_hash\r\n        self.pass_hash = generate_password_hash(self.password)\r\n\r\n    def check_password(self, password):\r\n        from werkzeug.security import check_password_hash\r\n        return check_password_hash(self.password, password)\r\n# db.create_all(app.app)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/data_base/models.py b/Backend/data_base/models.py
--- a/Backend/data_base/models.py	(revision 446fe91c5f3a88182e18ca3d51b50f3fdc921924)
+++ b/Backend/data_base/models.py	(date 1654595235964)
@@ -92,7 +92,7 @@
     price: int = db.Column(db.Integer, nullable=False)
     rating: int = db.Column(db.Integer, nullable=True)
     preview_url: str = db.Column(db.VARCHAR)
-    genres: List[Genre] = db.relationship('Genre', secondary=game_genres, backref=db.backref('users', lazy='dynamic'))
+    genres = db.relationship('Genre', secondary=game_genres, backref=db.backref('games', lazy='dynamic'))
 
     def __repr__(self):
         return self.name
@@ -106,9 +106,9 @@
     nickname: str = db.Column(db.String(100))
     login_mail: str = db.Column(db.String(100), unique=True)
     pass_hash: str = db.Column(db.String(255), nullable=False)
-    roles: List[Role] = db.relationship('Role', secondary=roles_users, backref=db.backref('users', lazy='dynamic'))
+    roles = db.relationship('Role', secondary=roles_users, backref=db.backref('users', lazy='dynamic'))
     users_rating: List[Game] = db.relationship('Game', secondary=user_games, backref=db.backref('users', lazy='dynamic'))
-
+    active = db.Column(db.Boolean)
     # def has_role(self, role):
     #     return self.role in roles_users
 
Index: Backend/templates/helper.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"base.html\" %}\r\n\r\n{% block title %}Helper{% endblock %}\r\n\r\n{% block body_content %}\r\n<h1 class=\"helper-text1\">\r\n  Выберете жанр, количество игроков и стоимость игры\r\n</h1>\r\n    <form class=\"helper-form\" name=\"helper-form\" action=\"{{ url_for(\"helper\") }}\" method=\"POST\">\r\n        <div class=\"helper-container3\">\r\n            <button class=\"helper-button button\" name=\"game-genre\">Adventure</button>\r\n            <button class=\"helper-button1 button\" name=\"game-genre\">FPS</button>\r\n            <button class=\"helper-button2 button\" name=\"game-genre\">MOBA</button>\r\n            <button class=\"helper-button3 button\" name=\"game-genre\">RPG</button>\r\n            <button class=\"helper-button4 button\" name=\"game-genre\">Racing</button>\r\n            <button class=\"helper-button5 button\" name=\"game-genre\">Strategy</button>\r\n        </div>\r\n        <div class=\"helper-container4\">\r\n            <div class=\"helper-container5\">\r\n                <span class=\"helper-text2\">Игроки</span>\r\n                <select class=\"helper-select\">\r\n                    <option value=\"2\" selected>2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4+\">4+</option>\r\n                </select>\r\n            </div>\r\n            <div class=\"helper-container6\">\r\n                <span class=\"helper-text3\">Стоимость</span>\r\n                <select class=\"helper-select1\">\r\n                    <option value=\"free\" selected>Бесплатная</option>\r\n                    <option value=\"cost\">Платная</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n        <input class=\"home-navlink1 button\" type=\"submit\" onclick=\"searchForGames();\" name=\"helper-search\" value=\"Find my game\" style=\"width: inherit\">\r\n        <div class=\"catalog-container4\" id=\"search-results\">\r\n        {% for game in games %}\r\n            <div class=\"game-card-feature-card\">\r\n                <div class=\"game-card-text\"><span>{{ game.appid }}</span></div>\r\n                <a href=\"{{ url_for(\"game_page\", appid=game.appid) }}\">\r\n                    <img\r\n                        alt=\"image\"\r\n                        src=\"{{ url_for(\"static\", filename=\"img/empty-300w.jpg\") }}\"\r\n                        class=\"game-card-image\"\r\n                    />\r\n                </a>\r\n                <div class=\"game-card-text\">\r\n                    <span class=\"game-name\">{{ game.name }}</span>\r\n                </div>\r\n            </div>\r\n        {% endfor %}\r\n      </div>\r\n    </form>\r\n{% endblock %}\r\n\r\n<script>\r\n    function searchForGames() {\r\n        \r\n    }\r\n</script>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/templates/helper.html b/Backend/templates/helper.html
--- a/Backend/templates/helper.html	(revision 446fe91c5f3a88182e18ca3d51b50f3fdc921924)
+++ b/Backend/templates/helper.html	(date 1654545247953)
@@ -6,47 +6,64 @@
 <h1 class="helper-text1">
   Выберете жанр, количество игроков и стоимость игры
 </h1>
-    <form class="helper-form" name="helper-form" action="{{ url_for("helper") }}" method="POST">
-        <div class="helper-container3">
-            <button class="helper-button button" name="game-genre">Adventure</button>
-            <button class="helper-button1 button" name="game-genre">FPS</button>
-            <button class="helper-button2 button" name="game-genre">MOBA</button>
-            <button class="helper-button3 button" name="game-genre">RPG</button>
-            <button class="helper-button4 button" name="game-genre">Racing</button>
-            <button class="helper-button5 button" name="game-genre">Strategy</button>
-        </div>
+    <form class="helper-form" name="helper-form" action="{{ url_for("helper") }}" method="GET">
+            {% for el in data %}
+            <div class="helper-container3">
+                <label>
+                    <input type="checkbox" name="genres" value="{{el.name|string}}">
+                    {{el.name|string}}
+                </label>
+            </div>
+            {% endfor %}
         <div class="helper-container4">
             <div class="helper-container5">
                 <span class="helper-text2">Игроки</span>
-                <select class="helper-select">
-                    <option value="2" selected>2</option>
-                    <option value="3">3</option>
-                    <option value="4+">4+</option>
+                <select name="gamers" class="helper-select">
+                    <option value="1" selected>1</option>
+                    <option value="2" >2</option>
+                    <option value="3" >3</option>
+                    <option value="4" >4</option>
+                    <option value="5">5</option>
                 </select>
             </div>
             <div class="helper-container6">
                 <span class="helper-text3">Стоимость</span>
-                <select class="helper-select1">
-                    <option value="free" selected>Бесплатная</option>
-                    <option value="cost">Платная</option>
+                <select name="cost" class="helper-select1">
+                    <option value="0" selected>Бесплатная</option>
+                    <option value="1">Платная</option>
                 </select>
             </div>
         </div>
-        <input class="home-navlink1 button" type="submit" onclick="searchForGames();" name="helper-search" value="Find my game" style="width: inherit">
+        <input class="home-navlink1 button" type="submit" onclick="searchForGames();" name="helper-search" value="Найти игру" style="width: inherit">
         <div class="catalog-container4" id="search-results">
         {% for game in games %}
-            <div class="game-card-feature-card">
-                <div class="game-card-text"><span>{{ game.appid }}</span></div>
-                <a href="{{ url_for("game_page", appid=game.appid) }}">
+            <div class="game">
+            <a href="{{ url_for("game_page", app_id=game.id) }}" style="width: min-content">
+                <div class="game-card-feature-card">
+                    <div class="game-card-text"><span>{{ game.id }}</span></div>
                     <img
-                        alt="image"
-                        src="{{ url_for("static", filename="img/empty-300w.jpg") }}"
-                        class="game-card-image"
+                            alt="image"
+                            {% if game.preview_url %}
+                            src="{{ game.preview_url }}"
+                            {% else %}
+                            src="{{ url_for("static", filename="img/empty-300w.jpg") }}"
+                            {% endif %}
+                            class="game-card-image"
                     />
-                </a>
-                <div class="game-card-text">
-                    <span class="game-name">{{ game.name }}</span>
+                    <div class="game-card-text">
+                        <span class="game-name">{{ game.name|striptags|title }}</span>
+                    </div>
+{#                    <div class="game-card-text">#}
+{#                        <span class="game-name">{{ game.price }}</span>#}
+{#                    </div>#}
+{#                    <div class="game-card-text">#}
+{#                        <span class="game-name">{{ game.players_count }}</span>#}
+{#                    </div>#}
+                    <div class="game-card-text">
+                        <span class="game-name">{{ short(game.short_description, 100) }}</span>
+                    </div>
                 </div>
+            </a>
             </div>
         {% endfor %}
       </div>
Index: Backend/app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import locale\r\nimport os\r\nfrom os import path\r\nimport json, requests\r\nfrom datetime import datetime\r\n\r\nimport sqlalchemy.orm\r\nfrom jinja2 import Environment\r\nfrom sqlalchemy.orm import Query\r\nfrom flask_sqlalchemy import SQLAlchemy, Pagination\r\n\r\nimport steam.webapi\r\n# import jwt\r\nfrom flask_login import login_required, logout_user, current_user, login_user, LoginManager\r\nfrom requests import Response\r\nfrom steam import steamid, webauth, webapi\r\n\r\nimport logging\r\nfrom steam.steamid import SteamID\r\nfrom steam.webapi import WebAPI, WebAPIInterface, WebAPIMethod\r\nfrom flask import Flask, render_template, jsonify, Markup, flash, redirect, url_for, request, make_response\r\nfrom flask_restful import Api, Resource, abort, reqparse\r\nfrom flasgger import Swagger, swag_from\r\nfrom typing import List\r\n\r\nfrom werkzeug.exceptions import NotFound, Forbidden, BadRequest, NotImplemented\r\nfrom werkzeug.security import check_password_hash, generate_password_hash\r\nfrom flask_migrate import Migrate\r\nfrom flask_security import UserMixin, RoleMixin, SQLAlchemyUserDatastore, Security\r\nfrom flask_admin import Admin, AdminIndexView\r\nfrom flask_admin.contrib.sqla import ModelView\r\nfrom data_base.models import *\r\n# from Backend.user import User\r\nfrom flask_security.utils import hash_password\r\n\r\nparent_dir = path.dirname(path.abspath(__file__))\r\nsteam_web_api_key: str\r\nwith open(path.join(parent_dir, 'steam_key.txt')) as file:\r\n    steam_web_api_key = file.read()\r\n# with open(path.join(app.root_path, 'steam_key.txt')) as file:\r\n#     steam_web_api_key = file.read()\r\nsteam_id = SteamID(76561198273560595)\r\n\r\napp = Flask(__name__, template_folder='templates')\r\napp.config[\"DEBUG\"] = 1\r\napp.config[\"APPLICATION_ROOT\"] = app.root_path\r\napp.config['SWAGGER'] = {\r\n    # 'title': 'GameCooker API',\r\n    # 'doc_dir': './api/swagger/',\r\n    'uiversion': 3,\r\n    'doc_dir': f'{path.join(app.root_path, \"api\", \"swagger\")}',\r\n    # 'endpoint': 'swagger',\r\n    # 'route': '/swagger'\r\n}\r\nprint(app.config)\r\napp.secret_key = os.urandom(16).hex()\r\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///gameCooker.db'\r\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\r\n\r\napp.config['SECURITY_PASSWORD_SALT'] = 'salt'\r\napp.config['SECURITY_PASSWORD_HASH'] = 'bcrypt'\r\napp.config['SECURITY_LOGIN_USER_TEMPLATE'] = 'login123.html'\r\n\r\nswagger_config = {\r\n    \"headers\": [\r\n    ],\r\n    \"specs\": [\r\n        {\r\n            \"endpoint\": 'swagger',\r\n            \"route\": '/api',\r\n            # \"rule_filter\": lambda rule: True,  # all in\r\n            # \"model_filter\": lambda tag: True,  # all in\r\n        }\r\n    ],\r\n    \"static_url_path\": \"/flasgger_static\",\r\n    # \"static_folder\": \"/api/swagger\",  # must be set by user\r\n    \"specs_route\": \"/swagger\"\r\n}\r\n\r\nmigrate = Migrate(app, db)\r\n\r\n# api = Api()\r\ndb.init_app(app)\r\nlogging.basicConfig(level=logging.DEBUG)\r\n\r\nsteam_api = WebAPI(\r\n    steam_web_api_key,\r\n    # format=\"vdf\",\r\n)\r\n# from api.steam import api_steam\r\nfrom api import steam, main\r\n\r\napp.register_blueprint(main.api_main, url_prefix='/main-api')\r\napp.register_blueprint(steam.api_steam, url_prefix='/steam-api')\r\n\r\nswagger = Swagger(\r\n    app,\r\n    template_file=os.path.join(app.root_path, 'api', 'swagger', 'swagger.yaml'),\r\n    parse=True,\r\n    config=swagger_config\r\n)\r\n# print(swagger.template_file)\r\n# print(f\"URL_MAP: {app.url_map}\")\r\n\r\n\r\nclass AdminMixin:\r\n    def is_accessible(self):\r\n        return current_user.has_role('admin')\r\n\r\n    def inaccessible_callback(self, name, **kwargs):\r\n        # localhost/admin -> login\r\n        return redirect(url_for('login123', next=request.url))\r\n\r\n\r\nclass AdminView(AdminMixin, ModelView):\r\n    pass\r\n\r\n\r\nclass HomeAdminView(AdminMixin, AdminIndexView):\r\n    pass\r\n\r\n# db.create_all()\r\n\r\n# Admin\r\nadmin = Admin(app, 'Game-Cooker', url='/login123', index_view=HomeAdminView(name='Home'))\r\nadmin.add_view(AdminView(User, db.session))\r\nadmin.add_view(AdminView(Role, db.session))\r\nadmin.add_view(AdminView(Game, db.session))\r\nadmin.add_view(AdminView(Genre, db.session))\r\n# Flask-Security\r\nuser_datastore = SQLAlchemyUserDatastore(db, User, Role)\r\nsecurity = Security(app, user_datastore)\r\n\r\nmanager = LoginManager(app)\r\nmanager.session_protection = \"strong\"\r\nmanager.login_view = \"index\"\r\nmanager.login_message = \"Авторизуйтесь для доступа к закрытым страницам\"\r\nmanager.login_message_category = \"success\"\r\n\r\n\r\n@manager.user_loader\r\ndef load_user(user_id):\r\n    return User.query.get(user_id)\r\n\r\n\r\ndef unauthorized_handler() -> Response:\r\n    return redirect(url_for(\"login123\"))\r\n\r\n\r\n@app.before_first_request\r\ndef create_tables():\r\n    db.create_all()\r\n    # user_datastore.create_user(email='matt@nobien.net', password='password')\r\n    # db.session.commit()\r\n\r\n\r\n@app.route('/', methods=['GET'])\r\n# @swag_from('home.yml')\r\ndef index():\r\n    return render_template('index.html', secret_key=app.secret_key)\r\n\r\n\r\n# @swag_from(\"catalog.yaml\")\r\n@app.route('/catalog', methods=['GET'])\r\n# @swag_from('catalog.yml')\r\ndef catalog():\r\n    GAMES_PER_PAGE = 8\r\n    GAMES_PER_PAGE_MAX = 24\r\n    page = request.args.get('page', 1, int)\r\n    games: Pagination = Game.query.paginate(page=page, error_out=True, per_page=GAMES_PER_PAGE, max_per_page=GAMES_PER_PAGE_MAX)\r\n    # json_games = requests.get(url_for(\"main-api.catalog\", page=page, _external=True)).json()\r\n    # games_dict: Dict[dict] = json_games[\"games\"]\r\n    # logging.info(games_dict)\r\n\r\n    return render_template('catalog.html', games=games, secret_key=app.secret_key)\r\n\r\n\r\n# @swag_from(\"catalog.yaml\", methods=\"GET\")\r\n@app.route('/game/<int:app_id>', methods=['GET'])\r\n# @swag_from('game.yml')\r\ndef game_page(app_id, key=steam_web_api_key, l=\"russian\"):\r\n    _game_data = requests.get(url_for(\"steam-api.get_app_info\", app_id=app_id, key=key, l=l, _external=True)).text\r\n    game_data_dict = json.loads(_game_data)\r\n    # logging.info(\"Movies: \\n\" + json.dumps(game_data_dict, indent=2))\r\n    logging.info(game_data_dict)\r\n    game_screenshots = game_data_dict['screenshots']\r\n    # game_trailers = game_data_dict['movies']\r\n    sd = Markup(game_data_dict['short_description'])\r\n    dd = Markup(game_data_dict['detailed_description'])\r\n    # If we want just a plain text:\r\n    # from boltons import strutils\r\n    # sd = strutils.html2text(game_data_dict['short_description'])\r\n    # dd = strutils.html2text(game_data_dict['detailed_description'])\r\n    # return json.dumps(game_data_dict, skipkeys=True, ensure_ascii=False)\r\n    return make_response(render_template('game-page.html', game=game_data_dict, sd=sd, dd=dd))\r\n\r\n\r\n# @swag_from(\"helper.yaml\")\r\n@app.route('/helper', methods=['GET', 'POST'])\r\n# @swag_from('helper.yml')\r\ndef helper():\r\n    return render_template('helper.html', secret_key=app.secret_key)\r\n\r\n\r\n@app.route('/profile', methods=['GET'])\r\n# @swag_from('profile.yaml')\r\ndef profile():\r\n    # user = get_user_from_db(id)\r\n    return render_template('profile.html', secret_key=app.secret_key)\r\n\r\n\r\n@app.route('/authors', methods=['GET'])\r\n# @swag_from('authors.yml')\r\ndef authors():\r\n    return render_template('authors.html', secret_key=app.secret_key)\r\n\r\n\r\n# @swag_from(\"login.yaml\", methods=[\"GET\", \"POST\"])\r\n@app.route('/login', methods=['GET', 'POST'])\r\n# @swag_from('login.yml')\r\ndef login123():\r\n    if request.method == \"POST\":\r\n        email = request.form['login-mail']\r\n        password = request.form['password']\r\n        user = User.query.filter_by(login_mail=email).first()\r\n        if not user or not check_password_hash(user.pass_hash, password):\r\n            flash('Please check your login details and try again.')\r\n            return redirect(url_for('profile'))\r\n        login_user(user)\r\n    # if the above check passes, then we know the user has the right credentials\r\n    return render_template('login123.html', secret_key=app.secret_key)\r\n\r\n\r\n# @swag_from(\"post.yaml\")\r\n@app.route('/registrate', methods=['GET', 'POST'])\r\n# @swag_from('registrate.yml')\r\ndef registrate():\r\n    if request.method == \"POST\":\r\n        if request.form['password'] == request.form['password2']:\r\n            user = User(nickname=request.form['nickname'], login_mail=request.form['login-mail'],\r\n                        pass_hash=generate_password_hash(request.form['password']))\r\n            try:\r\n                db.session.add(user)\r\n                db.session.commit()\r\n                flash(\"Успешно зарегистрировались\")\r\n            except:\r\n                return \"Ошибка, проверьте введенные данные\"\r\n            return redirect(url_for('login123'))\r\n        else:\r\n            flash(\"Неверно заполнены поля\")\r\n    return render_template('registration.html')\r\n\r\n\r\n# @swag_from(\"pass_change.yaml\")\r\n@app.route('/pass-change', methods=['PUT'])\r\n# @swag_from('pass-change.yml')\r\ndef pass_change():\r\n    # should be --PUT--\r\n    if request.method == \"POST\":\r\n        user = User.query.get(current_user.id)\r\n        old_password = request.form['old_password']\r\n        new_password = request.form['new_password']\r\n        new_password2 = request.form['new_password2']\r\n        if check_password_hash(user.pass_hash, old_password) and \\\r\n                new_password == new_password2:\r\n            user.pass_hash = generate_password_hash(new_password)\r\n            db.session.commit()\r\n        else:\r\n            flash(\"Неверно заполнены поля\")\r\n    return render_template('pass-change.html', secret_key=app.secret_key)\r\n\r\n\r\n@app.route('/logout')\r\n@login_required\r\ndef logout():\r\n    return redirect(url_for('security.logout'))\r\n\r\n\r\n@app.after_request\r\ndef add_header(response):\r\n    # response.cache_control.max_age = 1\r\n    return response\r\n\r\n\r\n# @app.errorhandler(NotFound)\r\n# def not_found(error):\r\n#     flash(error, 'error')\r\n#     code = NotFound.code\r\n#     message = \"Такой страницы не существует\"\r\n#     return render_template('error-handler.html', response=dict({code:message})), 404\r\n#\r\n#\r\n# @app.errorhandler(NotImplemented)\r\n# def not_implemented(error):\r\n#     flash(error, 'error')\r\n#     code = NotImplemented.code\r\n#     message = \"Такой страницы не существует\"\r\n#     return render_template('error-handler.html', response=dict({code:message})), 501\r\n\r\n\r\n@app.context_processor\r\ndef inject_enumerate():\r\n    return dict(enumerate=enumerate)\r\n\r\n\r\n@app.context_processor\r\ndef slice_text():\r\n    import textwrap\r\n    def short_text(_text, _width=80, _placeholder='...'):\r\n        return textwrap.shorten(text=_text, width=_width, placeholder=_placeholder)\r\n    return dict(short=short_text)\r\n\r\n\r\n@app.template_filter('reverse')\r\ndef reverse_filter(s):\r\n    return s[::-1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    jinja_env = Environment(extensions=['jinja2.ext.loopcontrols'])\r\n    app.run(debug=True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/app.py b/Backend/app.py
--- a/Backend/app.py	(revision 446fe91c5f3a88182e18ca3d51b50f3fdc921924)
+++ b/Backend/app.py	(date 1654595931098)
@@ -46,9 +46,9 @@
 app.config["APPLICATION_ROOT"] = app.root_path
 app.config['SWAGGER'] = {
     # 'title': 'GameCooker API',
-    # 'doc_dir': './api/swagger/',
+    # 'doc_dir': './restapi/swagger/',
     'uiversion': 3,
-    'doc_dir': f'{path.join(app.root_path, "api", "swagger")}',
+    'doc_dir': f'{path.join(app.root_path, "restapi", "swagger")}',
     # 'endpoint': 'swagger',
     # 'route': '/swagger'
 }
@@ -67,19 +67,19 @@
     "specs": [
         {
             "endpoint": 'swagger',
-            "route": '/api',
+            "route": '/restapi',
             # "rule_filter": lambda rule: True,  # all in
             # "model_filter": lambda tag: True,  # all in
         }
     ],
     "static_url_path": "/flasgger_static",
-    # "static_folder": "/api/swagger",  # must be set by user
+    # "static_folder": "/restapi/swagger",  # must be set by user
     "specs_route": "/swagger"
 }
 
 migrate = Migrate(app, db)
 
-# api = Api()
+# restapi = Api()
 db.init_app(app)
 logging.basicConfig(level=logging.DEBUG)
 
@@ -87,15 +87,15 @@
     steam_web_api_key,
     # format="vdf",
 )
-# from api.steam import api_steam
-from api import steam, main
+# from restapi.steam import api_steam
+from restapi import steam_API, main
 
 app.register_blueprint(main.api_main, url_prefix='/main-api')
-app.register_blueprint(steam.api_steam, url_prefix='/steam-api')
+app.register_blueprint(steam_API.api_steam, url_prefix='/steam-api')
 
 swagger = Swagger(
     app,
-    template_file=os.path.join(app.root_path, 'api', 'swagger', 'swagger.yaml'),
+    template_file=os.path.join(app.root_path, 'restapi', 'swagger', 'swagger.yaml'),
     parse=True,
     config=swagger_config
 )
@@ -121,8 +121,9 @@
 
 # db.create_all()
 
+
 # Admin
-admin = Admin(app, 'Game-Cooker', url='/login123', index_view=HomeAdminView(name='Home'))
+admin = Admin(app, 'GameCooker', url='/login123', index_view=HomeAdminView(name='Home'))
 admin.add_view(AdminView(User, db.session))
 admin.add_view(AdminView(Role, db.session))
 admin.add_view(AdminView(Game, db.session))
@@ -132,10 +133,6 @@
 security = Security(app, user_datastore)
 
 manager = LoginManager(app)
-manager.session_protection = "strong"
-manager.login_view = "index"
-manager.login_message = "Авторизуйтесь для доступа к закрытым страницам"
-manager.login_message_category = "success"
 
 
 @manager.user_loader
@@ -168,7 +165,7 @@
     GAMES_PER_PAGE_MAX = 24
     page = request.args.get('page', 1, int)
     games: Pagination = Game.query.paginate(page=page, error_out=True, per_page=GAMES_PER_PAGE, max_per_page=GAMES_PER_PAGE_MAX)
-    # json_games = requests.get(url_for("main-api.catalog", page=page, _external=True)).json()
+    # json_games = requests.get(url_for("main-restapi.catalog", page=page, _external=True)).json()
     # games_dict: Dict[dict] = json_games["games"]
     # logging.info(games_dict)
 
@@ -179,7 +176,7 @@
 @app.route('/game/<int:app_id>', methods=['GET'])
 # @swag_from('game.yml')
 def game_page(app_id, key=steam_web_api_key, l="russian"):
-    _game_data = requests.get(url_for("steam-api.get_app_info", app_id=app_id, key=key, l=l, _external=True)).text
+    _game_data = requests.get(url_for("steam-restapi.get_app_info", app_id=app_id, key=key, l=l, _external=True)).text
     game_data_dict = json.loads(_game_data)
     # logging.info("Movies: \n" + json.dumps(game_data_dict, indent=2))
     logging.info(game_data_dict)
@@ -199,7 +196,20 @@
 @app.route('/helper', methods=['GET', 'POST'])
 # @swag_from('helper.yml')
 def helper():
-    return render_template('helper.html', secret_key=app.secret_key)
+    all_genres = Genre.query.all()
+    if request.method == "GET":
+        genres_of_games = request.args.getlist('genres').sort()
+        gamers = request.args.get('gamers')
+        cost = request.args.get('cost')
+        games = Game.query.all()
+        for game in games:
+            temp_list = game.genres
+            temp_list.sort()
+            if not (temp_list == genres_of_games and gamers == game.players_count and cost == game.price):
+                games.remove(game)
+        return render_template('helper.html', data=all_genres, games=games)
+
+    return render_template('helper.html', data=all_genres)
 
 
 @app.route('/profile', methods=['GET'])
@@ -216,7 +226,7 @@
 
 
 # @swag_from("login.yaml", methods=["GET", "POST"])
-@app.route('/login', methods=['GET', 'POST'])
+@app.route('/login123', methods=['GET', 'POST'])
 # @swag_from('login.yml')
 def login123():
     if request.method == "POST":
@@ -238,7 +248,7 @@
     if request.method == "POST":
         if request.form['password'] == request.form['password2']:
             user = User(nickname=request.form['nickname'], login_mail=request.form['login-mail'],
-                        pass_hash=generate_password_hash(request.form['password']))
+                        pass_hash=generate_password_hash(request.form['password']), active=True)
             try:
                 db.session.add(user)
                 db.session.commit()
Index: Backend/api/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/api/main.py b/Backend/restapi/main.py
rename from Backend/api/main.py
rename to Backend/restapi/main.py
--- a/Backend/api/main.py	(revision 446fe91c5f3a88182e18ca3d51b50f3fdc921924)
+++ b/Backend/restapi/main.py	(date 1654548120614)
@@ -14,7 +14,7 @@
 
 from Backend.data_base.models import *
 
-api_main = Blueprint('main-api', __name__, url_prefix='main-api')
+api_main = Blueprint('main-restapi', __name__, url_prefix='main-restapi')
 
 
 class GamesAPI(MethodView):
@@ -109,8 +109,7 @@
     def get(self):
         genres = request.args.getlist("genres")
         players_count = int(request.args.get("players_count"))
-        min_price = int(request.args.get("min_price"))
-        max_price = int(request.args.get("max_price"))
+        price = int(request.form.get("price"))
 
         args = dict()
         for arg in request.args:
@@ -118,16 +117,10 @@
 
         filtered_games: list = Game.query.filter_by(**args).order_by(Game.rating)
 
-        # db.Query().join(Game)
-        # data = db.session.query(Game)\
-        #     .filter(
-        #     Game.price.in_((min_price, max_price)),
-        #     Game.players_count == players_count) \
-        #     .all()
-            # .filter(
-            # Genre.name.in_(genres)
-            # )\
-            # .all()
+        db.Query().join(Game)
+        data = db.session.query(Game).filter(Game.price == price,
+            Game.players_count == players_count) \
+            .all().filter(Genre.name.in_(genres)).all()
         return jsonify(data=filtered_games), 200
 
     # @swag_from("./swagger/helper/post.yaml")
@@ -139,7 +132,7 @@
 api_main.add_url_rule("/helper", view_func=helper, methods=["GET"])
 
 
-# @api.resource("/profile")
+# @restapi.resource("/profile")
 class ProfileAPI(Resource):
     def get(self, id=None):
         ids = request.args.get("ids", type=list)
@@ -164,7 +157,7 @@
 api_main.add_url_rule("/users", view_func=profile, methods=["GET", "POST"])
 
 
-# @api.resource("/login")
+# @restapi.resource("/login")
 class LoginAPI(Resource):
     def get(self):
         pass
@@ -185,7 +178,7 @@
 api_main.add_url_rule("/login", view_func=login, methods=["GET", "POST"])
 
 
-# @api.resource("/registrate")
+# @restapi.resource("/registrate")
 class RegistrateAPI(Resource):
     def get(self):
         pass
@@ -210,7 +203,7 @@
 api_main.add_url_rule("/registrate", view_func=registrate, methods=["GET", "POST"])
 
 
-# @api.resource("/change-pass")
+# @restapi.resource("/change-pass")
 class ChangePassAPI(Resource):
     def __init__(self) -> None:
         self.req_parse = reqparse.RequestParser()
@@ -244,9 +237,9 @@
 
 change_pass = LoginAPI.as_view("change-pass")
 api_main.add_url_rule("/change-pass", view_func=change_pass, methods=["GET", "POST"])
-# from Backend.app import api
-# api.add_resource(GamesAPI, "/catalog", "/game/<int:id>", endpoint="games")
-# api.add_resource(HelperAPI, "/helper", endpoint="helper")
-# api.add_resource(ProfileAPI, "/helper", endpoint="helper")
-# api.add_resource(LoginAPI, "/helper", endpoint="helper")
-# api.add_resource(RegistrateAPI, "/helper", endpoint="helper")
+# from Backend.app import restapi
+# restapi.add_resource(GamesAPI, "/catalog", "/game/<int:id>", endpoint="games")
+# restapi.add_resource(HelperAPI, "/helper", endpoint="helper")
+# restapi.add_resource(ProfileAPI, "/helper", endpoint="helper")
+# restapi.add_resource(LoginAPI, "/helper", endpoint="helper")
+# restapi.add_resource(RegistrateAPI, "/helper", endpoint="helper")
Index: Backend/api/steam.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/api/steam.py b/Backend/restapi/steam_API.py
rename from Backend/api/steam.py
rename to Backend/restapi/steam_API.py
--- a/Backend/api/steam.py	(revision 446fe91c5f3a88182e18ca3d51b50f3fdc921924)
+++ b/Backend/restapi/steam_API.py	(date 1654522364010)
@@ -8,7 +8,7 @@
 from flasgger import swag_from
 from steam import webapi
 
-api_steam = Blueprint('steam-api', __name__)
+api_steam = Blueprint('steam-restapi', __name__)
 
 
 # @swag_from("swagger/apilist/get.yaml", "yaml", endpoint="apilist", methods=["GET"])
Index: Backend/resources/request_steamwa.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nimport requests\r\n\r\n\r\ndef request_steam_web_api(interface, method, base_url=\"api.steampowered.com\", version=\"v001\",\r\n                          http_method=\"GET\", parameters: dict = None) -> dict:\r\n    \"\"\"How to Make a Steam Web API Request:\r\n\r\n    Request URL format:\r\n\r\n    ``https://{base_url}/{interface}/{method}/{version}?{parameters}``\r\n\r\n    :param base_url: Usually ``https://api.steampowered.com``\r\n    :param interface: Indicates which method group (interface) you want to use\r\n    :param method: Indicates which method within the interface you want to use\r\n    :param version: Indicates which version of the method you want to use\r\n    :param http_method: GET / POST\r\n    :param parameters: :optional: Parameters are delimited by the & character\r\n    :return: Python dictionary object of response\r\n    \"\"\"\r\n\r\n    # Already available from webapi module\r\n    # from steam import webapi\r\n    # response = webapi.webapi_request(f\"https://{base_url}/{interface}/{method}/{version}\", 'GET', params=parameters)\r\n    response: requests.Response = requests.Response()\r\n    if not parameters:\r\n        parameters = {'format': 'json'}\r\n    if http_method == \"GET\":\r\n        response = requests.get(f\"https://{base_url}/{interface}/{method}/{version}\", parameters)\r\n    elif http_method == \"POST\":\r\n        response = requests.post(f\"https://{base_url}/{interface}/{method}/{version}\", parameters)\r\n    response_dict = json.loads(response.text)\r\n    return response_dict\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/resources/request_steamwa.py b/Backend/resources/request_steamwa.py
--- a/Backend/resources/request_steamwa.py	(revision 446fe91c5f3a88182e18ca3d51b50f3fdc921924)
+++ b/Backend/resources/request_steamwa.py	(date 1654522364005)
@@ -2,7 +2,7 @@
 import requests
 
 
-def request_steam_web_api(interface, method, base_url="api.steampowered.com", version="v001",
+def request_steam_web_api(interface, method, base_url="restapi.steampowered.com", version="v001",
                           http_method="GET", parameters: dict = None) -> dict:
     """How to Make a Steam Web API Request:
 
Index: Backend/api/swagger/swagger.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/api/swagger/swagger.yaml b/Backend/restapi/swagger/swagger.yaml
rename from Backend/api/swagger/swagger.yaml
rename to Backend/restapi/swagger/swagger.yaml
--- a/Backend/api/swagger/swagger.yaml	(revision 446fe91c5f3a88182e18ca3d51b50f3fdc921924)
+++ b/Backend/restapi/swagger/swagger.yaml	(date 1654522364015)
@@ -19,7 +19,7 @@
 
 tags:
 - name: "steam"
-  description: "Deal with steam api requests"
+  description: "Deal with steam restapi requests"
 - name: "game"
   description: "Deal with game requests"
 - name: "helper"
@@ -33,7 +33,7 @@
 - "http"
 - "https"
 
-#basePath: "/api"
+#basePath: "/restapi"
 
 securityDefinitions:
    # Steam-API-Key: 71C62A93E943CF496209037648DA088D
diff --git a/Backend/api/swagger/change_pass/put.yaml b/Backend/restapi/swagger/change_pass/put.yaml
rename from Backend/api/swagger/change_pass/put.yaml
rename to Backend/restapi/swagger/change_pass/put.yaml
diff --git a/Backend/api/swagger/profile/get.yaml b/Backend/restapi/swagger/profile/get.yaml
rename from Backend/api/swagger/profile/get.yaml
rename to Backend/restapi/swagger/profile/get.yaml
diff --git a/Backend/api/swagger/registrate/post.yaml b/Backend/restapi/swagger/registrate/post.yaml
rename from Backend/api/swagger/registrate/post.yaml
rename to Backend/restapi/swagger/registrate/post.yaml
diff --git a/Backend/api/swagger/apilist/get.yaml b/Backend/restapi/swagger/apilist/get.yaml
rename from Backend/api/swagger/apilist/get.yaml
rename to Backend/restapi/swagger/apilist/get.yaml
diff --git a/Backend/api/swagger/catalog/get.yaml b/Backend/restapi/swagger/catalog/get.yaml
rename from Backend/api/swagger/catalog/get.yaml
rename to Backend/restapi/swagger/catalog/get.yaml
diff --git a/Backend/api/swagger/login/post.yaml b/Backend/restapi/swagger/login/post.yaml
rename from Backend/api/swagger/login/post.yaml
rename to Backend/restapi/swagger/login/post.yaml
diff --git a/Backend/api/swagger/helper/get.yaml b/Backend/restapi/swagger/helper/get.yaml
rename from Backend/api/swagger/helper/get.yaml
rename to Backend/restapi/swagger/helper/get.yaml
diff --git a/Backend/api/swagger/apps/get.yaml b/Backend/restapi/swagger/apps/get.yaml
rename from Backend/api/swagger/apps/get.yaml
rename to Backend/restapi/swagger/apps/get.yaml
diff --git a/Backend/api/swagger/game/get.yaml b/Backend/restapi/swagger/game/get.yaml
rename from Backend/api/swagger/game/get.yaml
rename to Backend/restapi/swagger/game/get.yaml
diff --git a/Backend/api/swagger/authors.yaml b/Backend/restapi/swagger/authors.yaml
rename from Backend/api/swagger/authors.yaml
rename to Backend/restapi/swagger/authors.yaml
