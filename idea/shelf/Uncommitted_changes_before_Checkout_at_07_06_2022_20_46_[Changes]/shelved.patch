Index: Backend/app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import locale\r\nimport os\r\nfrom os import path\r\nimport json, requests\r\nfrom datetime import datetime\r\n\r\nimport sqlalchemy.orm\r\nfrom jinja2 import Environment\r\nfrom sqlalchemy.orm import Query\r\nfrom flask_sqlalchemy import SQLAlchemy, Pagination\r\n\r\nimport steam.webapi\r\n# import jwt\r\nfrom flask_login import login_required, logout_user, current_user, login_user, LoginManager\r\nfrom requests import Response\r\nfrom steam import steamid, webauth, webapi\r\n\r\nimport logging\r\nfrom steam.steamid import SteamID\r\nfrom steam.webapi import WebAPI, WebAPIInterface, WebAPIMethod\r\nfrom flask import Flask, render_template, jsonify, Markup, flash, redirect, url_for, request, make_response\r\nfrom flask_restful import Api, Resource, abort, reqparse\r\nfrom flasgger import Swagger, swag_from\r\nfrom typing import List\r\n\r\nfrom werkzeug.exceptions import NotFound, Forbidden, BadRequest, NotImplemented\r\nfrom werkzeug.security import check_password_hash, generate_password_hash\r\nfrom flask_migrate import Migrate\r\nfrom flask_security import UserMixin, RoleMixin, SQLAlchemyUserDatastore, Security\r\nfrom flask_admin import Admin, AdminIndexView\r\nfrom flask_admin.contrib.sqla import ModelView\r\nfrom data_base.models import *\r\n# from Backend.user import User\r\nfrom flask_security.utils import hash_password\r\n\r\nparent_dir = path.dirname(path.abspath(__file__))\r\nsteam_web_api_key: str\r\nwith open(path.join(parent_dir, 'steam_key.txt')) as file:\r\n    steam_web_api_key = file.read()\r\n# with open(path.join(app.root_path, 'steam_key.txt')) as file:\r\n#     steam_web_api_key = file.read()\r\nsteam_id = SteamID(76561198273560595)\r\n\r\napp = Flask(__name__, template_folder='templates')\r\napp.config[\"DEBUG\"] = 1\r\napp.config[\"APPLICATION_ROOT\"] = app.root_path\r\napp.config['SWAGGER'] = {\r\n    # 'title': 'GameCooker API',\r\n    # 'doc_dir': './api/swagger/',\r\n    'uiversion': 3,\r\n    'doc_dir': f'{path.join(app.root_path, \"api\", \"swagger\")}',\r\n    # 'endpoint': 'swagger',\r\n    # 'route': '/swagger'\r\n}\r\nprint(app.config)\r\napp.secret_key = os.urandom(16).hex()\r\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///gameCooker.db'\r\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\r\n\r\napp.config['SECURITY_PASSWORD_SALT'] = 'salt'\r\napp.config['SECURITY_PASSWORD_HASH'] = 'bcrypt'\r\napp.config['SECURITY_LOGIN_USER_TEMPLATE'] = 'login123.html'\r\n\r\nswagger_config = {\r\n    \"headers\": [\r\n    ],\r\n    \"specs\": [\r\n        {\r\n            \"endpoint\": 'swagger',\r\n            \"route\": '/api',\r\n            # \"rule_filter\": lambda rule: True,  # all in\r\n            # \"model_filter\": lambda tag: True,  # all in\r\n        }\r\n    ],\r\n    \"static_url_path\": \"/flasgger_static\",\r\n    # \"static_folder\": \"/api/swagger\",  # must be set by user\r\n    \"specs_route\": \"/swagger\"\r\n}\r\n\r\nmigrate = Migrate(app, db)\r\n\r\n# api = Api()\r\ndb.init_app(app)\r\nlogging.basicConfig(level=logging.DEBUG)\r\n\r\nsteam_api = WebAPI(\r\n    steam_web_api_key,\r\n    # format=\"vdf\",\r\n)\r\n# from api.steam import api_steam\r\nfrom api import steam, main\r\n\r\napp.register_blueprint(main.api_main, url_prefix='/main-api')\r\napp.register_blueprint(steam.api_steam, url_prefix='/steam-api')\r\n\r\nswagger = Swagger(\r\n    app,\r\n    template_file=os.path.join(app.root_path, 'api', 'swagger', 'swagger.yaml'),\r\n    parse=True,\r\n    config=swagger_config\r\n)\r\n# print(swagger.template_file)\r\n# print(f\"URL_MAP: {app.url_map}\")\r\n\r\n\r\nclass AdminMixin:\r\n    def is_accessible(self):\r\n        return current_user.has_role('admin')\r\n\r\n    def inaccessible_callback(self, name, **kwargs):\r\n        # localhost/admin -> login\r\n        return redirect(url_for('login123', next=request.url))\r\n\r\n\r\nclass AdminView(AdminMixin, ModelView):\r\n    pass\r\n\r\n\r\nclass HomeAdminView(AdminMixin, AdminIndexView):\r\n    pass\r\n\r\n# db.create_all()\r\n\r\n# Admin\r\nadmin = Admin(app, 'Game-Cooker', url='/login123', index_view=HomeAdminView(name='Home'))\r\nadmin.add_view(AdminView(User, db.session))\r\nadmin.add_view(AdminView(Role, db.session))\r\nadmin.add_view(AdminView(Game, db.session))\r\nadmin.add_view(AdminView(Genre, db.session))\r\n# Flask-Security\r\nuser_datastore = SQLAlchemyUserDatastore(db, User, Role)\r\nsecurity = Security(app, user_datastore)\r\n\r\nmanager = LoginManager(app)\r\nmanager.session_protection = \"strong\"\r\nmanager.login_view = \"index\"\r\nmanager.login_message = \"Авторизуйтесь для доступа к закрытым страницам\"\r\nmanager.login_message_category = \"success\"\r\n\r\n\r\n@manager.user_loader\r\ndef load_user(user_id):\r\n    return User.query.get(user_id)\r\n\r\n\r\ndef unauthorized_handler() -> Response:\r\n    return redirect(url_for(\"login123\"))\r\n\r\n\r\n@app.before_first_request\r\ndef create_tables():\r\n    db.create_all()\r\n    # user_datastore.create_user(email='matt@nobien.net', password='password')\r\n    # db.session.commit()\r\n\r\n\r\n@app.route('/', methods=['GET'])\r\n# @swag_from('home.yml')\r\ndef index():\r\n    return render_template('index.html', secret_key=app.secret_key)\r\n\r\n\r\n# @swag_from(\"catalog.yaml\")\r\n@app.route('/catalog', methods=['GET'])\r\n# @swag_from('catalog.yml')\r\ndef catalog():\r\n    GAMES_PER_PAGE = 8\r\n    GAMES_PER_PAGE_MAX = 24\r\n    page = request.args.get('page', 1, int)\r\n    games: Pagination = Game.query.paginate(page=page, error_out=True, per_page=GAMES_PER_PAGE, max_per_page=GAMES_PER_PAGE_MAX)\r\n    # json_games = requests.get(url_for(\"main-api.catalog\", page=page, _external=True)).json()\r\n    # games_dict: Dict[dict] = json_games[\"games\"]\r\n    # logging.info(games_dict)\r\n\r\n    return render_template('catalog.html', games=games, secret_key=app.secret_key)\r\n\r\n\r\n# @swag_from(\"catalog.yaml\", methods=\"GET\")\r\n@app.route('/game/<int:app_id>', methods=['GET'])\r\n# @swag_from('game.yml')\r\ndef game_page(app_id, key=steam_web_api_key, l=\"russian\"):\r\n    _game_data = requests.get(url_for(\"steam-api.get_app_info\", app_id=app_id, key=key, l=l, _external=True)).text\r\n    game_data_dict = json.loads(_game_data)\r\n    # logging.info(\"Movies: \\n\" + json.dumps(game_data_dict, indent=2))\r\n    logging.info(game_data_dict)\r\n    game_screenshots = game_data_dict['screenshots']\r\n    # game_trailers = game_data_dict['movies']\r\n    sd = Markup(game_data_dict['short_description'])\r\n    dd = Markup(game_data_dict['detailed_description'])\r\n    # If we want just a plain text:\r\n    # from boltons import strutils\r\n    # sd = strutils.html2text(game_data_dict['short_description'])\r\n    # dd = strutils.html2text(game_data_dict['detailed_description'])\r\n    # return json.dumps(game_data_dict, skipkeys=True, ensure_ascii=False)\r\n    return make_response(render_template('game-page.html', game=game_data_dict, sd=sd, dd=dd))\r\n\r\n\r\n# @swag_from(\"helper.yaml\")\r\n@app.route('/helper', methods=['GET', 'POST'])\r\n# @swag_from('helper.yml')\r\ndef helper():\r\n    return render_template('helper.html', secret_key=app.secret_key)\r\n\r\n\r\n@app.route('/profile', methods=['GET'])\r\n# @swag_from('profile.yaml')\r\ndef profile():\r\n    # user = get_user_from_db(id)\r\n    return render_template('profile.html', secret_key=app.secret_key)\r\n\r\n\r\n@app.route('/authors', methods=['GET'])\r\n# @swag_from('authors.yml')\r\ndef authors():\r\n    return render_template('authors.html', secret_key=app.secret_key)\r\n\r\n\r\n# @swag_from(\"login.yaml\", methods=[\"GET\", \"POST\"])\r\n@app.route('/login', methods=['GET', 'POST'])\r\n# @swag_from('login.yml')\r\ndef login123():\r\n    if request.method == \"POST\":\r\n        email = request.form['login-mail']\r\n        password = request.form['password']\r\n        user = User.query.filter_by(login_mail=email).first()\r\n        if not user or not check_password_hash(user.pass_hash, password):\r\n            flash('Please check your login details and try again.')\r\n            return redirect(url_for('profile'))\r\n        login_user(user)\r\n    # if the above check passes, then we know the user has the right credentials\r\n    return render_template('login123.html', secret_key=app.secret_key)\r\n\r\n\r\n# @swag_from(\"post.yaml\")\r\n@app.route('/registrate', methods=['GET', 'POST'])\r\n# @swag_from('registrate.yml')\r\ndef registrate():\r\n    if request.method == \"POST\":\r\n        if request.form['password'] == request.form['password2']:\r\n            user = User(nickname=request.form['nickname'], login_mail=request.form['login-mail'],\r\n                        pass_hash=generate_password_hash(request.form['password']))\r\n            try:\r\n                db.session.add(user)\r\n                db.session.commit()\r\n                flash(\"Успешно зарегистрировались\")\r\n            except:\r\n                return \"Ошибка, проверьте введенные данные\"\r\n            return redirect(url_for('login123'))\r\n        else:\r\n            flash(\"Неверно заполнены поля\")\r\n    return render_template('registration.html')\r\n\r\n\r\n# @swag_from(\"pass_change.yaml\")\r\n@app.route('/pass-change', methods=['PUT'])\r\n# @swag_from('pass-change.yml')\r\ndef pass_change():\r\n    # should be --PUT--\r\n    if request.method == \"POST\":\r\n        user = User.query.get(current_user.id)\r\n        old_password = request.form['old_password']\r\n        new_password = request.form['new_password']\r\n        new_password2 = request.form['new_password2']\r\n        if check_password_hash(user.pass_hash, old_password) and \\\r\n                new_password == new_password2:\r\n            user.pass_hash = generate_password_hash(new_password)\r\n            db.session.commit()\r\n        else:\r\n            flash(\"Неверно заполнены поля\")\r\n    return render_template('pass-change.html', secret_key=app.secret_key)\r\n\r\n\r\n@app.route('/logout')\r\n@login_required\r\ndef logout():\r\n    return redirect(url_for('security.logout'))\r\n\r\n\r\n@app.after_request\r\ndef add_header(response):\r\n    # response.cache_control.max_age = 1\r\n    return response\r\n\r\n\r\n# @app.errorhandler(NotFound)\r\n# def not_found(error):\r\n#     flash(error, 'error')\r\n#     code = NotFound.code\r\n#     message = \"Такой страницы не существует\"\r\n#     return render_template('error-handler.html', response=dict({code:message})), 404\r\n#\r\n#\r\n# @app.errorhandler(NotImplemented)\r\n# def not_implemented(error):\r\n#     flash(error, 'error')\r\n#     code = NotImplemented.code\r\n#     message = \"Такой страницы не существует\"\r\n#     return render_template('error-handler.html', response=dict({code:message})), 501\r\n\r\n\r\n@app.context_processor\r\ndef inject_enumerate():\r\n    return dict(enumerate=enumerate)\r\n\r\n\r\n@app.context_processor\r\ndef slice_text():\r\n    import textwrap\r\n    def short_text(_text, _width=80, _placeholder='...'):\r\n        return textwrap.shorten(text=_text, width=_width, placeholder=_placeholder)\r\n    return dict(short=short_text)\r\n\r\n\r\n@app.template_filter('reverse')\r\ndef reverse_filter(s):\r\n    return s[::-1]\r\n\r\n\r\nif __name__ == '__main__':\r\n    jinja_env = Environment(extensions=['jinja2.ext.loopcontrols'])\r\n    app.run(debug=True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/app.py b/Backend/app.py
--- a/Backend/app.py	(revision 7dbc6bb72e103027514c1b18fcc0448724879a13)
+++ b/Backend/app.py	(date 1654623781184)
@@ -205,8 +205,8 @@
 @app.route('/profile', methods=['GET'])
 # @swag_from('profile.yaml')
 def profile():
-    # user = get_user_from_db(id)
-    return render_template('profile.html', secret_key=app.secret_key)
+    user = current_user
+    return render_template('profile.html', secret_key=app.secret_key, user=user)
 
 
 @app.route('/authors', methods=['GET'])
Index: Backend/resources/request_steamwa.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nimport requests\r\n\r\n\r\ndef request_steam_web_api(interface, method, base_url=\"api.steampowered.com\", version=\"v001\",\r\n                          http_method=\"GET\", parameters: dict = None) -> dict:\r\n    \"\"\"How to Make a Steam Web API Request:\r\n\r\n    Request URL format:\r\n\r\n    ``https://{base_url}/{interface}/{method}/{version}?{parameters}``\r\n\r\n    :param base_url: Usually ``https://api.steampowered.com``\r\n    :param interface: Indicates which method group (interface) you want to use\r\n    :param method: Indicates which method within the interface you want to use\r\n    :param version: Indicates which version of the method you want to use\r\n    :param http_method: GET / POST\r\n    :param parameters: :optional: Parameters are delimited by the & character\r\n    :return: Python dictionary object of response\r\n    \"\"\"\r\n\r\n    # Already available from webapi module\r\n    # from steam import webapi\r\n    # response = webapi.webapi_request(f\"https://{base_url}/{interface}/{method}/{version}\", 'GET', params=parameters)\r\n    response: requests.Response = requests.Response()\r\n    if not parameters:\r\n        parameters = {'format': 'json'}\r\n    if http_method == \"GET\":\r\n        response = requests.get(f\"https://{base_url}/{interface}/{method}/{version}\", parameters)\r\n    elif http_method == \"POST\":\r\n        response = requests.post(f\"https://{base_url}/{interface}/{method}/{version}\", parameters)\r\n    response_dict = json.loads(response.text)\r\n    return response_dict\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/resources/request_steamwa.py b/Backend/resources/request_steamwa.py
--- a/Backend/resources/request_steamwa.py	(revision 7dbc6bb72e103027514c1b18fcc0448724879a13)
+++ b/Backend/resources/request_steamwa.py	(date 1654623781189)
@@ -2,7 +2,7 @@
 import requests
 
 
-def request_steam_web_api(interface, method, base_url="api.steampowered.com", version="v001",
+def request_steam_web_api(interface, method, base_url="restapi.steampowered.com", version="v001",
                           http_method="GET", parameters: dict = None) -> dict:
     """How to Make a Steam Web API Request:
 
Index: Backend/templates/profile.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends \"base.html\" %}\r\n\r\n{% block title %}Profile{% endblock %}\r\n\r\n{% block body_content %}\r\n    <img\r\n      alt=\"image\"\r\n      src=\"https://play.teleporthq.io/static/svg/default-img.svg\"\r\n      class=\"profile-image1\"\r\n    />\r\n    <h1 class=\"profile-text1\">User name</h1>\r\n    <span class=\"profile-text2\">User Email</span>\r\n    <a href=\"{{ url_for(\"pass_change\") }}\" class=\"profile-navlink2\">Сменить пароль</a>\r\n    <div class=\"profile-catalog\">\r\n      <h1 class=\"profile-text3\">Liked games:</h1>\r\n      <div class=\"profile-container3\">\r\n        <div class=\"game-card-feature-card game-card-root-class-name4\">\r\n          <img\r\n            alt=\"image\"\r\n            src=\"../static/img/empty-300w.jpg\"\r\n            class=\"game-card-image\"\r\n          />\r\n          <h2 class=\"game-card-text\"><span>Game name</span></h2>\r\n        </div>\r\n        <div class=\"game-card-feature-card game-card-root-class-name5\">\r\n          <img\r\n            alt=\"image\"\r\n            src=\"../static/img/empty-300w.jpg\"\r\n            class=\"game-card-image\"\r\n          />\r\n          <h2 class=\"game-card-text\"><span>Game name</span></h2>\r\n        </div>\r\n        <div class=\"game-card-feature-card game-card-root-class-name6\">\r\n          <img\r\n            alt=\"image\"\r\n            src=\"../static/img/empty-300w.jpg\"\r\n            class=\"game-card-image\"\r\n          />\r\n          <h2 class=\"game-card-text\"><span>Game name</span></h2>\r\n        </div>\r\n        <div class=\"game-card-feature-card game-card-root-class-name7\">\r\n          <img\r\n            alt=\"image\"\r\n            src=\"../static/img/empty-300w.jpg\"\r\n            class=\"game-card-image\"\r\n          />\r\n          <h2 class=\"game-card-text\"><span>Game name</span></h2>\r\n        </div>\r\n      </div>\r\n    </div>\r\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/templates/profile.html b/Backend/templates/profile.html
--- a/Backend/templates/profile.html	(revision 7dbc6bb72e103027514c1b18fcc0448724879a13)
+++ b/Backend/templates/profile.html	(date 1654623781178)
@@ -8,8 +8,8 @@
       src="https://play.teleporthq.io/static/svg/default-img.svg"
       class="profile-image1"
     />
-    <h1 class="profile-text1">User name</h1>
-    <span class="profile-text2">User Email</span>
+    <h1 class="profile-text1">{{ user.nickname }}</h1>
+    <span class="profile-text2">{{ user.login_mail }}</span>
     <a href="{{ url_for("pass_change") }}" class="profile-navlink2">Сменить пароль</a>
     <div class="profile-catalog">
       <h1 class="profile-text3">Liked games:</h1>
Index: Backend/api/swagger/swagger.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/api/swagger/swagger.yaml b/Backend/restapi/swagger/swagger.yaml
rename from Backend/api/swagger/swagger.yaml
rename to Backend/restapi/swagger/swagger.yaml
--- a/Backend/api/swagger/swagger.yaml	(revision 7dbc6bb72e103027514c1b18fcc0448724879a13)
+++ b/Backend/restapi/swagger/swagger.yaml	(date 1654623781198)
@@ -19,7 +19,7 @@
 
 tags:
 - name: "steam"
-  description: "Deal with steam api requests"
+  description: "Deal with steam restapi requests"
 - name: "game"
   description: "Deal with game requests"
 - name: "helper"
@@ -33,7 +33,7 @@
 - "http"
 - "https"
 
-#basePath: "/api"
+#basePath: "/restapi"
 
 securityDefinitions:
    # Steam-API-Key: 71C62A93E943CF496209037648DA088D
Index: Backend/api/steam.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Backend/api/steam.py b/Backend/restapi/steam_API.py
rename from Backend/api/steam.py
rename to Backend/restapi/steam_API.py
--- a/Backend/api/steam.py	(revision 7dbc6bb72e103027514c1b18fcc0448724879a13)
+++ b/Backend/restapi/steam_API.py	(date 1654623781211)
@@ -8,7 +8,7 @@
 from flasgger import swag_from
 from steam import webapi
 
-api_steam = Blueprint('steam-api', __name__)
+api_steam = Blueprint('steam-restapi', __name__)
 
 
 # @swag_from("swagger/apilist/get.yaml", "yaml", endpoint="apilist", methods=["GET"])
diff --git a/Backend/api/swagger/registrate/post.yaml b/Backend/restapi/swagger/registrate/post.yaml
rename from Backend/api/swagger/registrate/post.yaml
rename to Backend/restapi/swagger/registrate/post.yaml
diff --git a/Backend/api/swagger/change_pass/put.yaml b/Backend/restapi/swagger/change_pass/put.yaml
rename from Backend/api/swagger/change_pass/put.yaml
rename to Backend/restapi/swagger/change_pass/put.yaml
diff --git a/Backend/api/swagger/profile/get.yaml b/Backend/restapi/swagger/profile/get.yaml
rename from Backend/api/swagger/profile/get.yaml
rename to Backend/restapi/swagger/profile/get.yaml
diff --git a/Backend/api/swagger/game/get.yaml b/Backend/restapi/swagger/game/get.yaml
rename from Backend/api/swagger/game/get.yaml
rename to Backend/restapi/swagger/game/get.yaml
diff --git a/Backend/api/swagger/catalog/get.yaml b/Backend/restapi/swagger/catalog/get.yaml
rename from Backend/api/swagger/catalog/get.yaml
rename to Backend/restapi/swagger/catalog/get.yaml
diff --git a/Backend/api/swagger/login/post.yaml b/Backend/restapi/swagger/login/post.yaml
rename from Backend/api/swagger/login/post.yaml
rename to Backend/restapi/swagger/login/post.yaml
diff --git a/Backend/api/main.py b/Backend/restapi/main.py
rename from Backend/api/main.py
rename to Backend/restapi/main.py
diff --git a/Backend/api/swagger/apilist/get.yaml b/Backend/restapi/swagger/apilist/get.yaml
rename from Backend/api/swagger/apilist/get.yaml
rename to Backend/restapi/swagger/apilist/get.yaml
diff --git a/Backend/api/swagger/authors.yaml b/Backend/restapi/swagger/authors.yaml
rename from Backend/api/swagger/authors.yaml
rename to Backend/restapi/swagger/authors.yaml
diff --git a/Backend/api/swagger/helper/get.yaml b/Backend/restapi/swagger/helper/get.yaml
rename from Backend/api/swagger/helper/get.yaml
rename to Backend/restapi/swagger/helper/get.yaml
diff --git a/Backend/api/swagger/apps/get.yaml b/Backend/restapi/swagger/apps/get.yaml
rename from Backend/api/swagger/apps/get.yaml
rename to Backend/restapi/swagger/apps/get.yaml
